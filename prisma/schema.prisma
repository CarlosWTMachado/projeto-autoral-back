// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        Int      @id(map: "users_pk") @default(autoincrement())
    email     String   @unique
    password  String
    fullName  String
    addressId Int
    address   Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
    phones    Phone[]
    pets      Pet[]
    walker    Walker[]

    @@map("users")
}

model Address {
    id         Int     @id(map: "addresses_pk") @default(autoincrement())
    number     Int
    complement String?
    cepId      Int
    users      User[]
    cep        Cep     @relation(fields: [cepId], references: [id], onDelete: Cascade)

    @@map("addresses")
}

model Cep {
    id        Int       @id(map: "ceps_pk") @default(autoincrement())
    number    Int       @unique
    addresses Address[]

    @@map("ceps")
}

model Phone {
    id     Int    @id(map: "phones_pk") @default(autoincrement())
    number String @unique
    userId Int
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("phones")
}

model Pet {
    id            Int             @id(map: "pets_pk") @default(autoincrement())
    name          String
    picture       String?
    vaccinated    Boolean
    ownerId       Int
    owner         User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    availableWalk AvailableWalk[]

    @@unique([ownerId, name], name: "OwnerId_name")
    @@unique([ownerId, id], name: "OwnerId_id")
    @@map("pets")
}

model Walker {
    id          Int           @id(map: "walkers_pk") @default(autoincrement())
    cpf         String        @unique
    picture     String
    userId      Int           @unique
    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    OnGoingWalk OnGoingWalk[]

    @@map("walkers")
}

model AvailableWalk {
    id          Int          @id(map: "availableWalks_pk") @default(autoincrement())
    completed   Boolean      @default(false)
    petId       Int          @unique
    pet         Pet          @relation(fields: [petId], references: [id], onDelete: Cascade)
    OnGoingWalk OnGoingWalk[]

    @@map("availableWalks")
}

model OnGoingWalk {
    id              Int           @id(map: "onGoingWalks_pk") @default(autoincrement())
    walkerId        Int
    availableWalkId Int           @unique
    availableWalk   AvailableWalk @relation(fields: [availableWalkId], references: [id], onDelete: Cascade)
    walker          Walker        @relation(fields: [walkerId], references: [id], onDelete: Cascade)

    @@map("onGoingWalks")
}
